const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// ----------------------------
// 1️⃣ MongoDB Connection
// ----------------------------
mongoose.connect('mongodb://localhost:27017/bankDB')
  .then(() => console.log('✅ Connected to MongoDB'))
  .catch(err => console.error('❌ MongoDB Connection Error:', err));

// ----------------------------
// 2️⃣ Mongoose Schema
// ----------------------------
const userSchema = new mongoose.Schema({
  name: String,
  balance: Number
});

const User = mongoose.model('User', userSchema);

// ----------------------------
// 3️⃣ Sample Users (optional setup route)
// ----------------------------
app.post('/setup', async (req, res) => {
  await User.deleteMany(); // Clear old data
  const users = await User.insertMany([
    { name: 'Alice', balance: 5000 },
    { name: 'Bob', balance: 3000 },
    { name: 'Charlie', balance: 2000 }
  ]);
  res.json({ message: 'Sample users created', users });
});

// ----------------------------
// 4️⃣ Transfer Route
// ----------------------------
app.post('/transfer', async (req, res) => {
  const { senderName, receiverName, amount } = req.body;

  if (!senderName || !receiverName || !amount) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  if (amount <= 0) {
    return res.status(400).json({ error: 'Transfer amount must be positive' });
  }

  try {
    const sender = await User.findOne({ name: senderName });
    const receiver = await User.findOne({ name: receiverName });

    // Validate accounts
    if (!sender) return res.status(404).json({ error: 'Sender not found' });
    if (!receiver) return res.status(404).json({ error: 'Receiver not found' });

    // Check balance
    if (sender.balance < amount) {
      return res.status(400).json({ error: 'Insufficient balance' });
    }

    // Sequential update (no DB transactions)
    sender.balance -= amount;
    await sender.save();

    receiver.balance += amount;
    await receiver.save();

    res.json({
      message: 'Transfer successful',
      sender: { name: sender.name, balance: sender.balance },
      receiver: { name: receiver.name, balance: receiver.balance }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Server error' });
  }
});

// ----------------------------
// 5️⃣ Get All Users (for testing)
// ----------------------------
app.get('/users', async (req, res) => {
  const users = await User.find();
  res.json(users);
});

// ----------------------------
// 6️⃣ Start Server
// ----------------------------
app.listen(3000, () => {
  console.log('🚀 Server running on http://localhost:3000');
});
